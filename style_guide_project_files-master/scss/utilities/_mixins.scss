// font styles
@mixin font-styles(
  $color: $color-primary,
  $size: null,
  $txt-align: null,
  $fw: null
) {
  color: $color;
  text-decoration: none;
  font-family: $font-stack-primary;
  font-size: $size;
  text-align: $txt-align;
  font-weight: $fw;
  @content;
}

// image styles
@mixin img-style(
  $w: null,
  $pad: null,
  $disp: block,
  $btm-margin: null,
  $brdr: null
) {
  @include center($w: $w, $pad: $pad, $disp: $disp) {
    margin-bottom: $btm-margin;
    border: $brdr;
  }
}

// button syles
@mixin btn-style(
  $txt-color: $white,
  $bg-color: null,
  $txt-tr: $txt-tr-none,
  $top-margin: 15px
) {
  padding: 10px 20px;
  border-radius: $btn-brdr-radius;
  background-color: $bg-color;
  color: $txt-color;
  text-transform: $txt-tr;
  font-family: $font-stack-primary;
  margin-top: $top-margin;
}

@mixin btn-theme {
  @each $theme, $color in $button-themes {
    &--#{$theme} {
      @include btn-style(
        $bg-color: darken($color, 10%),
        $txt-tr: $txt-tr-upper
      );
    }
    &--#{$theme}:hover {
      @include btn-style($bg-color: $color, $txt-tr: $txt-tr-upper);
    }
    @content;
  }
}

// grid styles
@mixin grid-theme($i) {
  $color: map-get($grid-themes, $i);

  @include error-handler(
    $condition: (
      $color == null
    ),
    $statement: "Please enter a valid grid column number"
  );

  &--#{$i} {
    @include btn-style($bg-color: darken($color, 20%));
  }
}

// Center containers
@mixin center($w: null, $pad: null, $disp: null) {
  width: $w;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
  display: $disp;
  padding: $pad;
  @content;
}

// blockquote
@mixin blockquote {
  padding: 15px 0 15px 30px;
  margin-top: 40px;
  margin-bottom: 40px;
  font-size: 20px;
  font-style: italic;
  border-left: 5px solid $color-secondary;
  border-radius: 5px;
}

// Create a flex container
@mixin flexy(
  $disp: flex,
  $dir: null,
  $wrap: null,
  $just: null,
  $flx-basis: null
) {
  display: $disp;
  flex-direction: $dir;
  flex-wrap: $wrap;
  justify-content: $just;
  flex-basis: $flx-basis;
}

// Media queries
@mixin mq($break) {
  $value: map-get($breakpoints, $break);
  $sm: map-get($breakpoints, "sm");

  @include error-handler(
    $condition: (
      $value == null
    ),
    $statement: "'#{$break}' is not a valid breakpoint name."
  );

  @if $value < $sm {
    @media (max-width: $value) {
      @content;
    }
  } @else {
    @media (min-width: $value) {
      @content;
    }
  }
}

// Error Handler
@mixin error-handler($condition, $statement) {
  @if $condition {
    @error $statement;
  }
}
